# Correlated subquery with joins
select t.number from numbers(1) as t, numbers(1) as t1 where t.number = (select count(*) from numbers(1) as t2, numbers(1) as t3 where t.number = t2.number)
----
Project: [number (#0)]
    Filter: [t.number (#0) = CAST(if(is_null(scalar_subquery_4 (#4)), 0, scalar_subquery_4 (#4)) AS BIGINT UNSIGNED)]
        HashJoin: SINGLE, build keys: [subquery_6 (#6)], probe keys: [subquery_0 (#0)], join filters: []
            CrossJoin
                Scan: default.system.numbers
                Scan: default.system.numbers
            Project: [COUNT(*) (#4),number (#6)]
                EvalScalar: [COUNT(*) (#5)]
                    Aggregate(Final): group items: [subquery_6 (#6)], aggregate functions: [COUNT(*)]
                        Aggregate(Partial): group items: [subquery_6 (#6)], aggregate functions: [COUNT(*)]
                            HashJoin: INNER, build keys: [t2.number (#2)], probe keys: [subquery_6 (#6)], join filters: []
                                Scan: default.system.numbers
                                CrossJoin
                                    Scan: default.system.numbers
                                    Scan: default.system.numbers


# Exists correlated subquery with joins
select t.number from numbers(1) as t where exists (select t1.number from numbers(1) as t1 where t.number = t1.number) or t.number > 1
----
Project: [number (#0)]
    Filter: [(3 (#3)) OR (t.number (#0) > 1)]
        HashJoin: MARK, build keys: [subquery_0 (#0)], probe keys: [subquery_2 (#2)], join filters: []
            HashJoin: INNER, build keys: [t1.number (#1)], probe keys: [subquery_2 (#2)], join filters: []
                Scan: default.system.numbers
                Scan: default.system.numbers
            Scan: default.system.numbers


# Uncorrelated subquery
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = 0)
----
Project: [number (#0)]
    CrossJoin
        Scan: default.system.numbers
        Project: [subquery (#3)]
            Filter: [subquery_3 (#3)]
                EvalScalar: [count(*) (#2) = 1]
                    Aggregate(Final): group items: [], aggregate functions: [count(*)]
                        Aggregate(Partial): group items: [], aggregate functions: [count(*)]
                            Limit: [1], Offset: [0]
                                Filter: [numbers.number (#1) = 0]
                                    Scan: default.system.numbers


# Uncorrelated subquery
select t.number from numbers(1) as t where number = (select * from numbers(1) where number = 0)
----
Project: [number (#0)]
    Filter: [t.number (#0) = scalar_subquery_1 (#1)]
        HashJoin: SINGLE, build keys: [], probe keys: [], join filters: []
            Scan: default.system.numbers
            Filter: [numbers.number (#1) = 0]
                Scan: default.system.numbers


# Correlated subquery can be translated to SemiJoin
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number)
----
Project: [number (#0)]
    HashJoin: SEMI, build keys: [numbers.number (#1)], probe keys: [t.number (#0)], join filters: []
        Scan: default.system.numbers
        Scan: default.system.numbers


# Correlated subquery can be translated to AntiJoin
select t.number from numbers(1) as t where not exists (select * from numbers(1) where number = t.number)
----
Project: [number (#0)]
    Filter: [not(3 (#3))]
        HashJoin: MARK, build keys: [subquery_0 (#0)], probe keys: [subquery_2 (#2)], join filters: []
            HashJoin: INNER, build keys: [numbers.number (#1)], probe keys: [subquery_2 (#2)], join filters: []
                Scan: default.system.numbers
                Scan: default.system.numbers
            Scan: default.system.numbers


select * from numbers(1) as t where exists (select number as a from numbers(1) where number = t.number)
----
Project: [number (#0)]
    HashJoin: SEMI, build keys: [numbers.number (#1)], probe keys: [t.number (#0)], join filters: []
        Scan: default.system.numbers
        Scan: default.system.numbers


# Exists with different kinds of predicate
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and number = 0 and t.number < 10)
----
Project: [number (#0)]
    HashJoin: SEMI, build keys: [numbers.number (#1)], probe keys: [t.number (#0)], join filters: []
        Filter: [t.number (#0) < 10]
            Scan: default.system.numbers
        Filter: [numbers.number (#1) = 0]
            Scan: default.system.numbers


# Exists with non-equi predicate
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and t.number < number)
----
Project: [number (#0)]
    HashJoin: SEMI, build keys: [numbers.number (#1)], probe keys: [t.number (#0)], join filters: [t.number (#0) < numbers.number (#1)]
        Scan: default.system.numbers
        Scan: default.system.numbers


# Exists project required columns
select t.number from numbers(1) as t where exists (select number as a, number as b, number as c from numbers(1) where number = t.number)
----
Project: [number (#0)]
    HashJoin: SEMI, build keys: [numbers.number (#1)], probe keys: [t.number (#0)], join filters: []
        Scan: default.system.numbers
        Scan: default.system.numbers


# Push down filter through CrossApply
select t.number from numbers(1) as t, numbers(1) as t1 where (select count(*) = 1 from numbers(1) where t.number = number) and t.number = t1.number
----
Project: [number (#0)]
    Filter: [CAST(if(is_null(scalar_subquery_3 (#3)), 0, scalar_subquery_3 (#3)) AS BIGINT UNSIGNED)]
        HashJoin: SINGLE, build keys: [subquery_5 (#5)], probe keys: [subquery_0 (#0)], join filters: []
            HashJoin: INNER, build keys: [t1.number (#1)], probe keys: [t.number (#0)], join filters: []
                Scan: default.system.numbers
                Scan: default.system.numbers
            Project: [COUNT(*) = 1 (#3),number (#5)]
                EvalScalar: [COUNT(*) (#4) = 1]
                    Aggregate(Final): group items: [subquery_5 (#5)], aggregate functions: [COUNT(*)]
                        Aggregate(Partial): group items: [subquery_5 (#5)], aggregate functions: [COUNT(*)]
                            HashJoin: INNER, build keys: [numbers.number (#2)], probe keys: [subquery_5 (#5)], join filters: []
                                Scan: default.system.numbers
                                Scan: default.system.numbers


# Semi join with other conditions
select t.number from numbers(1) as t where exists(select * from numbers(1) as t1 where t.number > t1.number) and not exists(select * from numbers(1) as t1 where t.number < t1.number)
----
Project: [number (#0)]
    Filter: [not(4 (#4))]
        HashJoin: MARK, build keys: [subquery_0 (#0)], probe keys: [subquery_3 (#3)], join filters: []
            Filter: [subquery_3 (#3) < t1.number (#2)]
                CrossJoin
                    Scan: default.system.numbers
                    Scan: default.system.numbers
            HashJoin: SEMI, build keys: [], probe keys: [], join filters: [t.number (#0) > t1.number (#1)]
                Scan: default.system.numbers
                Scan: default.system.numbers


